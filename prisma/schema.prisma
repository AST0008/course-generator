// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int?      @default(10)

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id    String @id @default(cuid())
  name  String
  image String
  units Unit[]
}

model Unit {
  id      String    @id @default(cuid())
  coursId String
  name    String
  course  Course    @relation(fields: [coursId], references: [id])
  Chapter Chapter[]

  @@index([coursId], name: "courseId")
}

model Chapter {
  id     String @id @default(cuid())
  unitId String

  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?    @db.VarChar(3000)
  unit               Unit       @relation(fields: [unitId], references: [id])
  questions          Question[]

  @@index([unitId], name: "unitID")
}

model Question {
  id        String  @id @default(cuid())
  chapterId String
  question  String  @db.VarChar(3000)
  answer    String  @db.VarChar(3000)
  options   String  @db.VarChar(3000)
  videoId   String?

  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId, question], name: "chapter_question_index")
}

model UserSubscription {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  razorpayCustomerId       String    @unique @map("razorpay_customer_id")
  razorpaySubscriptionId   String?   @unique @map("razorpay_subscription_id")
  razorpayPriceId          String?   @map("razorpay_price_id")
  razorpayCurrentPeriodEnd DateTime? @map("razorpay_current_period_end")
  isPro                    Boolean   @default(false)
}
